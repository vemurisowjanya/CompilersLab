//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */

public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
	//
	// Auto class visitors--probably don't need to be overridden.
	//
	int args = 0;
	int checkMoreThan4 = 0;
	
	public R visit(NodeList n, A argu) {
		R _ret=null;
		int _count=0;
		for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
			e.nextElement().accept(this,argu);
			_count++;
		}
		return _ret;
	}

	public R visit(NodeListOptional n, A argu) {
		if ( n.present() ) {
			R _ret=null;
			int _count=0;
			for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
				e.nextElement().accept(this,argu);
				_count++;
			}
			return _ret;
		}
		else
			return null;
	}

	public R visit(NodeOptional n, A argu) {
		if ( n.present() )
			return n.node.accept(this,argu);
		else
			return null;
	}

	public R visit(NodeSequence n, A argu) {
		R _ret=null;
		int _count=0;
		for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
			e.nextElement().accept(this,argu);
			_count++;
		}
		return _ret;
	}

	public R visit(NodeToken n, A argu) { return null; }

	//
	// User-generated visitor methods below
	//

	/**
	 * f0 -> "MAIN"
	 * f1 -> "["
	 * f2 -> IntegerLiteral()
	 * f3 -> "]"
	 * f4 -> "["
	 * f5 -> IntegerLiteral()
	 * f6 -> "]"
	 * f7 -> "["
	 * f8 -> IntegerLiteral()
	 * f9 -> "]"
	 * f10 -> StmtList()
	 * f11 -> "END"
	 * f12 -> ( Procedure() )*
	 * f13 -> VariablePackingInfo()
	 * f14 -> <EOF>
	 */
	public R visit(Goal n, A argu) {
		R _ret=null;
		
        //main
		System.out.println(".text");
		System.out.println(".globl           main");
		System.out.println("main:");
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		String arg1 = n.f2.accept(this, argu).toString();
		int x = Integer.parseInt(arg1);
		n.f3.accept(this, argu);
		n.f4.accept(this, argu);
		String arg2 = n.f5.accept(this, argu).toString();
		int y = Integer.parseInt(arg2);
		n.f6.accept(this, argu);
		n.f7.accept(this, argu);
		String arg3 = n.f8.accept(this, argu).toString();
		int z = Integer.parseInt(arg3);
		z = z>4?(z-4):0;
		System.out.println("move $fp, $sp");
		System.out.println("sw $ra, -4($fp)");
		int tmp = 4*(1+y+z);
		System.out.println("subu $sp, $sp, "+tmp);
		n.f9.accept(this, argu);
		n.f10.accept(this, argu);
		n.f11.accept(this, argu);
		System.out.println("lw $ra, -4($fp)");
		System.out.println("addu $sp, $sp, "+tmp);
		System.out.println("jr $ra");
		n.f12.accept(this, argu);
		n.f13.accept(this, argu);
		n.f14.accept(this, argu);
		
		//halloc
		System.out.println(".text");
		System.out.println(".globl _halloc");
		System.out.println("_halloc:");
		System.out.println("li $v0, 9");
		System.out.println("syscall");
		System.out.println(" jr $ra");
		
		//print
		System.out.println(".text");
		System.out.println(".globl _print");
		System.out.println("_print:");
		System.out.println("li $v0, 1");
        System.out.println("syscall");
        System.out.println("la $a0, newl");
        System.out.println("li $v0, 4");
        System.out.println("syscall");
        System.out.println("jr $ra");
        
        //newl
        System.out.println(".data");
        System.out.println(".align   0");
        System.out.println("newl:    .asciiz \"\\n\""); 
        System.out.println(".data");
        System.out.println(".align   0");
        System.out.println("str_er:  .asciiz \"ERROR: abnormal termination\\n\""); 
		return _ret;
	}

	/**
	 * f0 -> ( ( Label() )? Stmt() )*
	 */
	public R visit(StmtList n, A argu) {
		R _ret=null;
		n.f0.accept(this, (A)"print");
		return _ret;
	}

	/**
	 * f0 -> Label()
	 * f1 -> "["
	 * f2 -> IntegerLiteral()
	 * f3 -> "]"
	 * f4 -> "["
	 * f5 -> IntegerLiteral()
	 * f6 -> "]"
	 * f7 -> "["
	 * f8 -> IntegerLiteral()
	 * f9 -> "]"
	 * f10 -> StmtList()
	 * f11 -> "END"
	 */
	public R visit(Procedure n, A argu) {
		R _ret=null;
		String str = n.f0.accept(this, argu).toString();
		System.out.println(".text");
		System.out.println(".globl           "+str);
		System.out.println(str+":");
		n.f1.accept(this, argu);
		String str1 = n.f2.accept(this, argu).toString();
		int x = Integer.parseInt(str1);
		n.f3.accept(this, argu);
		n.f4.accept(this, argu);
		String str2 = n.f5.accept(this, argu).toString();
		int y = Integer.parseInt(str2);
		n.f6.accept(this, argu);
		n.f7.accept(this, argu);
		String str3 = n.f8.accept(this, argu).toString();
		int z = Integer.parseInt(str3);
		z = z>4?(z-4):0;
		int tmp = 4*(2+y+z);
		System.out.println("sw $fp, -8($sp)");
		System.out.println("move $fp, $sp");
		System.out.println("sw $ra, -4($fp)");
		System.out.println("subu $sp, $sp, "+tmp);
		n.f9.accept(this, argu);
		args = z;
		checkMoreThan4 = x>4?x-4:0;
		n.f10.accept(this, argu);
		n.f11.accept(this, argu);
		System.out.println("lw $ra, -4($fp)");
		System.out.println("lw $fp, "+(tmp-8)+"($sp)");
		System.out.println("addu $sp, $sp, "+tmp);
		System.out.println("jr $ra");
		return _ret;
	}

	/**
	 * f0 -> NoOpStmt()
	 *       | ErrorStmt()
	 *       | CJumpStmt()
	 *       | JumpStmt()
	 *       | HStoreStmt()
	 *       | HLoadStmt()
	 *       | MoveStmt()
	 *       | PrintStmt()
	 *       | ALoadStmt()
	 *       | AStoreStmt()
	 *       | PassArgStmt()
	 *       | CallStmt()
	 */
	public R visit(Stmt n, A argu) {
		R _ret=null;
		n.f0.accept(this, (A)"no_print");
		return _ret;
	}

	/**
	 * f0 -> "NOOP"
	 */
	public R visit(NoOpStmt n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		System.out.println("nop");
		return _ret;
	}

	/**
	 * f0 -> "ERROR"
	 */
	public R visit(ErrorStmt n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		System.out.println("la $a0, str_er");
	        System.out.println("syscall");
		return _ret;
	}

	/**
	 * f0 -> "CJUMP"
	 * f1 -> Reg()
	 * f2 -> Label()
	 */
	public R visit(CJumpStmt n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		String str1 = n.f1.accept(this, argu).toString();
		String str2 = n.f2.accept(this, argu).toString();
		System.out.println("beqz "+str1+" "+str2);
		return _ret;
	}

	/**
	 * f0 -> "JUMP"
	 * f1 -> Label()
	 */
	public R visit(JumpStmt n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		String str = n.f1.accept(this, argu).toString();
		System.out.println("b "+str);
		return _ret;
	}

	/**
	 * f0 -> "HSTORE"
	 * f1 -> Reg()
	 * f2 -> IntegerLiteral()
	 * f3 -> Reg()
	 */
	public R visit(HStoreStmt n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		String str1 = n.f1.accept(this, argu).toString();
		String str2 = n.f2.accept(this, argu).toString();
		String str3 = n.f3.accept(this, argu).toString();
		System.out.println("sw "+str3+", "+str2+"("+str1+")");
		return _ret;
	}

	/**
	 * f0 -> "HLOAD"
	 * f1 -> Reg()
	 * f2 -> Reg()
	 * f3 -> IntegerLiteral()
	 */
	public R visit(HLoadStmt n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		String str1 = n.f1.accept(this, argu).toString();
		String str2 = n.f2.accept(this, argu).toString();
		String str3 = n.f3.accept(this, argu).toString();
		System.out.println("lw "+str1+" "+str3+"("+str2+")");
		return _ret;
	}

	/**
	 * f0 -> "MOVE"
	 * f1 -> Reg()
	 * f2 -> Exp()
	 */
	public R visit(MoveStmt n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		String str1 = n.f1.accept(this, argu).toString();
		String str2 = n.f2.accept(this, argu).toString();
		if(str2.endsWith("?"))
			System.out.println("la "+str1+" "+str2.substring(0, str2.length()-1));
		else if(str2.contains("!")){
			String tmp = str2.replace("!", str1);
			System.out.println(tmp);
		}
		else if(str2.contains("%"))
			System.out.println("li "+str1+" "+str2.substring(0, str2.length()-1));
		else
			System.out.println("move "+str1+" "+str2);
		return _ret;
	}

	/**
	 * f0 -> "PRINT"
	 * f1 -> SimpleExp()
	 */
	public R visit(PrintStmt n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		String str = n.f1.accept(this, argu).toString();
		if(str.contains("%"))
			System.out.println("li $a0 "+str.substring(0, str.length()-1));
		else
			System.out.println("move $a0 "+str);
		System.out.println("jal _print"); 
		return _ret;
	}

	/**
	 * f0 -> "ALOAD"
	 * f1 -> Reg()
	 * f2 -> SpilledArg()
	 */
	public R visit(ALoadStmt n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		String str1 = n.f1.accept(this, argu).toString();
		String str2 = n.f2.accept(this, argu).toString();
		Integer i = Integer.valueOf(str2);
		if(i<checkMoreThan4){
			i = 4*i;
			System.out.println("lw "+str1+", "+i+"($fp)");
		}
		else{
			i = 4*(i+args);
			System.out.println("lw "+str1+", "+i+"($sp)");
		}
		return _ret;
	}

	/**
	 * f0 -> "ASTORE"
	 * f1 -> SpilledArg()
	 * f2 -> Reg()
	 */
	public R visit(AStoreStmt n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		String str1 = n.f1.accept(this, argu).toString();
		String str2 = n.f2.accept(this, argu).toString();
		Integer i = Integer.valueOf(str1);
		i = 4*(i+args);
		System.out.println("sw "+str2+", "+i+"($sp)");
		return _ret;
	}

	/**
	 * f0 -> "PASSARG"
	 * f1 -> IntegerLiteral()
	 * f2 -> Reg()
	 */
	public R visit(PassArgStmt n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		String str1 = n.f1.accept(this, argu).toString();
		String str2 = n.f2.accept(this, argu).toString();
		Integer i = Integer.valueOf(str1);
		i = 4*(i-1);
		System.out.println("sw "+str2+", "+i+"($sp)");
		return _ret;
	}

	/**
	 * f0 -> "CALL"
	 * f1 -> SimpleExp()
	 */
	public R visit(CallStmt n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		String str = n.f1.accept(this, argu).toString();
		System.out.println("jalr "+str);
		return _ret;
	}

	/**
	 * f0 -> HAllocate()
	 *       | BinOp()
	 *       | SimpleExp()
	 */
	public R visit(Exp n, A argu) {
		R _ret=null;
		_ret = n.f0.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "HALLOCATE"
	 * f1 -> SimpleExp()
	 */
	public R visit(HAllocate n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		String str = n.f1.accept(this, argu).toString();
		if(str.contains("%"))
			str = str.substring(0, str.length()-1);
		System.out.println("add $a0, $0, "+str);
		System.out.println("jal _halloc");
		_ret = (R)"$v0";
		return _ret;
	}

	/**
	 * f0 -> Operator()
	 * f1 -> Reg()
	 * f2 -> SimpleExp()
	 */
	public R visit(BinOp n, A argu) {
		R _ret=null;
		String str1 = n.f0.accept(this, argu).toString();
		String str2 = n.f1.accept(this, argu).toString();
		String str3 = n.f2.accept(this, argu).toString();
		if(str3.contains("%"))
			str3 = str3.substring(0,str3.length()-1);
		_ret = (R)(str1+" !, "+str2+", "+str3);
		return _ret;
	}

	/**
	 * f0 -> "LT"
	 *       | "PLUS"
	 *       | "MINUS"
	 *       | "TIMES"
	 *       | "DIV"
	 *       | "BITOR"
	 *       | "BITAND"
	 *       | "LSHIFT"
	 *       | "RSHIFT"
	 *       | "BITXOR"
	 */
	public R visit(Operator n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		int k = n.f0.which;
		switch(k){
		case 0:
			_ret = (R)"slt";
			break;
		case 1:
			_ret = (R)"add";
			break;
		case 2:
			_ret = (R)"sub";
			break;
		case 3:
			_ret = (R)"mul";
			break;
		case 4:
			_ret = (R)"div";
			break;
		case 5:
			_ret = (R)"or";
			break;
		case 6:
			_ret = (R)"and";
			break;
		case 7:
			_ret = (R)"sll";
			break;
		case 8:
			_ret = (R)"srl";
			break;
		case 9:
			_ret = (R)"xor";
			break;
		}
		return _ret;
	}

	/**
	 * f0 -> "SPILLEDARG"
	 * f1 -> IntegerLiteral()
	 */
	public R visit(SpilledArg n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		_ret = n.f1.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> Reg()
	 *       | IntegerLiteral()
	 *       | Label()
	 */
	public R visit(SimpleExp n, A argu) {
		R _ret=null;
		_ret = (R)n.f0.accept(this, argu).toString();
		if(n.f0.which == 2)
			_ret = (R)(_ret.toString()+"?");
		else if(n.f0.which == 1)
			_ret = (R)(_ret.toString()+"%");
		return _ret;
	}

	/**
	 * f0 -> "a0"
	 *       | "a1"
	 *       | "a2"
	 *       | "a3"
	 *       | "t0"
	 *       | "t1"
	 *       | "t2"
	 *       | "t3"
	 *       | "t4"
	 *       | "t5"
	 *       | "t6"
	 *       | "t7"
	 *       | "s0"
	 *       | "s1"
	 *       | "s2"
	 *       | "s3"
	 *       | "s4"
	 *       | "s5"
	 *       | "s6"
	 *       | "s7"
	 *       | "t8"
	 *       | "t9"
	 *       | "v0"
	 *       | "v1"
	 */
	public R visit(Reg n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		int k = n.f0.which;
		switch(k){
		case 0:
			_ret = (R)"$a0";
			break;
		case 1:
			_ret = (R)"$a1";
			break;
		case 2:
			_ret = (R)"$a2";
			break;
		case 3:
			_ret = (R)"$a3";
			break;
		case 4:
			_ret = (R)"$t0";
			break;
		case 5:
			_ret = (R)"$t1";
			break;
		case 6:
			_ret = (R)"$t2";
			break;
		case 7:
			_ret = (R)"$t3";
			break;
		case 8:
			_ret = (R)"$t4";
			break;
		case 9:
			_ret = (R)"$t5";
			break;

		case 10:
			_ret = (R)"$t6";
			break;

		case 11:
			_ret = (R)"$t7";
			break;

		case 12:
			_ret = (R)"$s0";
			break;

		case 13:
			_ret = (R)"$s1";
			break;

		case 14:
			_ret = (R)"$s2";
			break;

		case 15:
			_ret = (R)"$s3";
			break;

		case 16:
			_ret = (R)"$s4";
			break;

		case 17:
			_ret = (R)"$s5";
			break;

		case 18:
			_ret = (R)"$s6";
			break;

		case 19:
			_ret = (R)"$s7";
			break;

		case 20:
			_ret = (R)"$t8";
			break;

		case 21:
			_ret = (R)"$t9";
			break;

		case 22:
			_ret = (R)"$v0";
			break;

		case 23:
			_ret = (R)"$v1";
			break;

		}
		return _ret;
	}

	/**
	 * f0 -> <INTEGER_LITERAL>
	 */
	public R visit(IntegerLiteral n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		_ret = (R)n.f0.tokenImage;
		return _ret;
	}

	/**
	 * f0 -> <IDENTIFIER>
	 */
	public R visit(Label n, A argu) {
		R _ret=null;
		_ret = (R)n.f0.tokenImage;
		if(argu!=null && argu.toString().equals("print"))
			System.out.println(_ret.toString()+":");
		n.f0.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "// Number of  vars after packing ="
	 * f1 -> IntegerLiteral()
	 * f2 -> "; Number of Spilled vars ="
	 * f3 -> IntegerLiteral()
	 */
	public R visit(VariablePackingInfo n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		n.f3.accept(this, argu);
		return _ret;
	}

}
