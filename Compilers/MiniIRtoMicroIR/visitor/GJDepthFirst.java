//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
	//
	// Auto class visitors--probably don't need to be overridden.
	//
	
	private Integer count_temp = 500;
	private Stack<String> argsList = new Stack<String>();
	 
	public R visit(NodeList n, A argu) {
		R _ret=null;
		int _count=0;
		for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
			e.nextElement().accept(this,argu);
			_count++;
		}
		return _ret;
	}

	public R visit(NodeListOptional n, A argu) {
		if ( n.present() ) {
			R _ret=null;
			int _count=0;
			for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
				e.nextElement().accept(this,argu);
				_count++;
			}
			return _ret;
		}
		else
			return null;
	}

	public R visit(NodeOptional n, A argu) {
		if ( n.present() )
			return n.node.accept(this,argu);
		else
			return null;
	}

	public R visit(NodeSequence n, A argu) {
		R _ret=null;
		int _count=0;
		for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
			e.nextElement().accept(this,argu);
			_count++;
		}
		return _ret;
	}

	public R visit(NodeToken n, A argu) { return null; }

	//
	// User-generated visitor methods below
	//

	/**
	 * f0 -> "MAIN"
	 * f1 -> StmtList()
	 * f2 -> "END"
	 * f3 -> ( Procedure() )*
	 * f4 -> <EOF>
	 */
	public R visit(Goal n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		System.out.println("MAIN");
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		System.out.println("END");
		n.f3.accept(this, argu);
		n.f4.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> ( ( Label() )? Stmt() )*
	 */
	public R visit(StmtList n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> Label()
	 * f1 -> "["
	 * f2 -> IntegerLiteral()
	 * f3 -> "]"
	 * f4 -> StmtExp()
	 */
	public R visit(Procedure n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		String str2 = n.f2.accept(this, argu).toString();
		System.out.println("[ "+str2+" ] ");
		n.f3.accept(this, argu);
		n.f4.accept(this, (A)"1");
		return _ret;
	}

	/**
	 * f0 -> NoOpStmt()
	 *       | ErrorStmt()
	 *       | CJumpStmt()
	 *       | JumpStmt()
	 *       | HStoreStmt()
	 *       | HLoadStmt()
	 *       | MoveStmt()
	 *       | PrintStmt()
	 */
	public R visit(Stmt n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "NOOP"
	 */
	public R visit(NoOpStmt n, A argu) {
		R _ret=null;
		System.out.println("NOOP");
		n.f0.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "ERROR"
	 */
	public R visit(ErrorStmt n, A argu) {
		R _ret=null;
		System.out.println("ERROR");
		n.f0.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "CJUMP"
	 * f1 -> Exp()
	 * f2 -> Label()
	 */
	public R visit(CJumpStmt n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		String str1 = n.f1.accept(this, argu).toString();
		System.out.println("CJUMP "+str1);
		n.f2.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "JUMP"
	 * f1 -> Label()
	 */
	public R visit(JumpStmt n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		System.out.println("JUMP");
		n.f1.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "HSTORE"
	 * f1 -> Exp()
	 * f2 -> IntegerLiteral()
	 * f3 -> Exp()
	 */
	public R visit(HStoreStmt n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		String str1 = n.f1.accept(this, argu).toString();
		String str2 = n.f2.accept(this, argu).toString();
		String str3 = n.f3.accept(this, argu).toString();
		System.out.println("HSTORE "+str1+" "+str2+" "+str3);
		return _ret;
	}

	/**
	 * f0 -> "HLOAD"
	 * f1 -> Temp()
	 * f2 -> Exp()
	 * f3 -> IntegerLiteral()
	 */
	public R visit(HLoadStmt n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		String str1 = n.f1.accept(this, argu).toString();
		String str2 = n.f2.accept(this, argu).toString();
		String str3 = n.f3.accept(this, argu).toString();
		System.out.println("HLOAD "+str1+" "+str2+" "+str3);
		return _ret;
	}

	/**
	 * f0 -> "MOVE"
	 * f1 -> Temp()
	 * f2 -> Exp()
	 */
	public R visit(MoveStmt n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		String str1 = n.f1.accept(this, argu).toString();
		String str2 = n.f2.accept(this, argu).toString();
		System.out.println("MOVE "+str1+" "+str2);
		return _ret;
	}

	/**
	 * f0 -> "PRINT"
	 * f1 -> Exp()
	 */
	public R visit(PrintStmt n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		String str = n.f1.accept(this, argu).toString();
		System.out.println("PRINT "+str);
		return _ret;
	}

	/**
	 * f0 -> StmtExp()
	 *       | Call()
	 *       | HAllocate()
	 *       | BinOp()
	 *       | Temp()
	 *       | IntegerLiteral()
	 *       | Label()
	 */
	public R visit(Exp n, A argu) {
		R _ret=null;
		Integer ret_temp ;
		if(n.f0.which==6){
			System.out.println("MOVE TEMP "+count_temp);
			ret_temp = count_temp;
			count_temp++;
			n.f0.accept(this, argu);
		}
		else {
			String str;
			if(n.f0.which==0)
				str = n.f0.accept(this, (A)"0").toString();
			else
				str = n.f0.accept(this, argu).toString();
		System.out.println("MOVE TEMP "+count_temp+" "+str);
		ret_temp = count_temp;
		count_temp++;
		}

		if(argu!=null && argu.toString().equals("2")){
			argsList.push("TEMP "+ret_temp);
		}
		_ret = (R)("TEMP "+ret_temp);
		return _ret;
	}

	/**
	 * f0 -> "BEGIN"
	 * f1 -> StmtList()
	 * f2 -> "RETURN"
	 * f3 -> Exp()
	 * f4 -> "END"
	 */
	public R visit(StmtExp n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		if(argu.toString().equals("1"))
			System.out.println("BEGIN");
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		String str = n.f3.accept(this, argu).toString();
		System.out.println("MOVE TEMP "+count_temp+" "+str);
		Integer prev_temp = count_temp;
		count_temp++;
		if(argu.toString().equals("1")){
			System.out.println("RETURN");
			System.out.println("TEMP "+prev_temp);
			argu = null;
			n.f4.accept(this, argu);
			System.out.println("END");
		}
		_ret = (R)("TEMP "+prev_temp);
		return _ret;
	}

	/**
	 * f0 -> "CALL"
	 * f1 -> Exp()
	 * f2 -> "("
	 * f3 -> ( Exp() )*
	 * f4 -> ")"
	 */
	public R visit(Call n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		argu = null;
		String str1 = n.f1.accept(this, argu).toString();
		n.f2.accept(this, argu);
		argsList.push("temp");
		n.f3.accept(this, (A)"2");
		System.out.println("MOVE TEMP "+count_temp+" "+"CALL "+str1+" ( ");
		ArrayList<String> ls = new ArrayList<String>();
		while(true){
			String temp = argsList.pop();
			if(!temp.equals("temp"))
				ls.add(temp);
			else
				break;
		}
		for(int j=ls.size()-1;j>=0;j--){
			System.out.println(ls.get(j));
		}
		System.out.println(")");
		_ret = (R)("TEMP "+count_temp);
		count_temp++;
		n.f4.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "HALLOCATE"
	 * f1 -> Exp()
	 */
	public R visit(HAllocate n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		argu = null;
		String str = n.f1.accept(this, argu).toString();
		System.out.println("MOVE TEMP "+count_temp+" HALLOCATE "+str);
		_ret = (R)("TEMP "+count_temp);
		count_temp++;
		return _ret;
	}

	/**
	 * f0 -> Operator()
	 * f1 -> Exp()
	 * f2 -> Exp()
	 */
	public R visit(BinOp n, A argu) {
		R _ret=null;
		String op = n.f0.accept(this, argu).toString();
		argu = null;
		String str1 = n.f1.accept(this, argu).toString();
		String str2 = n.f2.accept(this, argu).toString();
		System.out.println("MOVE TEMP "+count_temp+" "+op+" "+str1+" "+str2);
		_ret = (R)("TEMP "+count_temp);
		count_temp++;
		return _ret;
	}

	/**
	 * f0 -> "LE"
	 *       | "NE"
	 *       | "PLUS"
	 *       | "MINUS"
	 *       | "TIMES"
	 *       | "DIV"
	 */
	public R visit(Operator n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		switch(n.f0.which){
		case 0:       {_ret = (R)"LE"; break;}
		case 1:		  {	_ret = (R)("NE"); break;}
		case 2:		{_ret = (R)("PLUS");break;}
		case 3:		{_ret = (R)("MINUS");break;}
		case 4:		{_ret = (R)("TIMES");break;}
		case 5:		{_ret = (R)("DIV");break;}
		}
		return _ret;
	}

	/**
	 * f0 -> "TEMP"
	 * f1 -> IntegerLiteral()
	 */
	public R visit(Temp n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		String str = n.f1.accept(this, argu).toString();
		_ret = (R)("TEMP "+str);
		return _ret;
	}

	/**
	 * f0 -> <INTEGER_LITERAL>
	 */
	public R visit(IntegerLiteral n, A argu) {
		R _ret=null;
		_ret = (R)(n.f0.tokenImage);
		n.f0.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> <IDENTIFIER>
	 */
	public R visit(Label n, A argu) {
		R _ret=null;
		System.out.println(n.f0.tokenImage);
		n.f0.accept(this, argu);
		_ret = (R)(n.f0.tokenImage);
		return _ret;
	}

}
