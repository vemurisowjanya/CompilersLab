//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class Generate<R,A> implements GJVisitor<R,A> {
	//
	// Auto class visitors--probably don't need to be overridden.
	//
	
	public static  HashMap<String,HashMap<String,String>> Regs = SecondParse.funcAllocTempRegs;
	
	public static HashMap<String,HashMap<String,Integer>> Locations = SecondParse.funcAllocTempLocation;

	public static HashMap<String,Integer> numArgs = FirstParse.numArgs;
	public static HashMap<String,Integer> maxArgs = FirstParse.maxArgs;
	String name;
	String sepReg = "t9";
	int countArgs;
	int labelCount = 500; 
	
	public R visit(NodeList n, A argu) {
		R _ret=null;
		int _count=0;
		for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
			e.nextElement().accept(this,argu);
			_count++;
		}
		return _ret;
	}

	public R visit(NodeListOptional n, A argu) {
		if ( n.present() ) {
			R _ret=null;
			int _count=0;
			for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
				e.nextElement().accept(this,argu);
				_count++;
			}
			return _ret;
		}
		else
			return null;
	}

	public R visit(NodeOptional n, A argu) {
		if ( n.present() )
			return n.node.accept(this,argu);
		else
			return null;
	}

	public R visit(NodeSequence n, A argu) {
		R _ret=null;
		int _count=0;
		for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
			e.nextElement().accept(this,argu);
			_count++;
		}
		return _ret;
	}

	public R visit(NodeToken n, A argu) { return null; }

	//
	// User-generated visitor methods below
	//

	/**
	 * f0 -> "MAIN"
	 * f1 -> StmtList()
	 * f2 -> "END"
	 * f3 -> ( Procedure() )*
	 * f4 -> <EOF>
	 */
	public R visit(Goal n, A argu) {
		R _ret=null;
		name = "MAIN";
		int tmp = maxArgs.get(name)>4?(maxArgs.get(name)-4):0;
		int secondArg = Locations.get(name).size()+tmp+17;
		System.out.println(name+"[0]["+secondArg+"]["+maxArgs.get(name)+"]");
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		System.out.println("END");
		n.f3.accept(this, argu);
		System.out.println("// Number of  vars after packing = 0; Number of Spilled vars = 0");
		n.f4.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> ( ( Label() )? Stmt() )*
	 */
	public R visit(StmtList n, A argu) {
		R _ret=null;
		n.f0.accept(this, (A)"print");
		return _ret;
	}

	/**
	 * f0 -> Label()
	 * f1 -> "["
	 * f2 -> IntegerLiteral()
	 * f3 -> "]"
	 * f4 -> StmtExp()
	 */
	public R visit(Procedure n, A argu) {
		R _ret=null;
		name = n.f0.accept(this, argu).toString();
		int tmp = maxArgs.get(name)>4?(maxArgs.get(name)-4):0;
		int secondArg = Locations.get(name).size()+tmp+17;
		System.out.println(name+"["+numArgs.get(name)+"]["+secondArg+"]["+maxArgs.get(name)+"]");
		
		
		int temp = numArgs.get(name);			//extra args
		int base = temp<4?0:temp-4;				
		base+=Locations.get(name).size();	//spilled
		
		for(int i=0;i<8;i++){
			System.out.println("ASTORE SPILLEDARG "+(base+i)+" s"+i);
		}
		
		int noOfArgs = numArgs.get(name);
		String str1;
		for(int i=0;i<noOfArgs;i++)
		{
			str1 = ("TEMP "+i);
			String isReg;
			Integer isLoc;
			
			isReg = Regs.get(name).get(str1);
			isLoc = Locations.get(name).get(str1);
			if(isReg!=null){
				str1 = isReg;
				if(i<4)
					System.out.println("MOVE "+str1+" a"+i);
				
				else{
					System.out.println("ALOAD v0 SPILLEDARG "+(i-4));
					System.out.println("MOVE "+str1+" v0");
				}
				
			}
			else if(isLoc!=null)
			{
				if(i<4){
					System.out.println("MOVE "+sepReg+" a"+i);
					System.out.println("ASTORE SPILLEDARG "+isLoc+" "+sepReg);
				}
				else{
					System.out.println("ALOAD v0 SPILLEDARG "+(i-4));
					System.out.println("MOVE "+sepReg+" v0");
					System.out.println("ASTORE SPILLEDARG "+isLoc+" "+sepReg);
				}
			}
			else{
				if(i<4)
					System.out.println("MOVE "+sepReg+" a"+i);
				
				else{
					System.out.println("ALOAD v0 SPILLEDARG "+(i-4));
					System.out.println("MOVE "+sepReg+" v0");
				}
			}
		}
		
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		n.f3.accept(this, argu);
		n.f4.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> NoOpStmt()
	 *       | ErrorStmt()
	 *       | CJumpStmt()
	 *       | JumpStmt()
	 *       | HStoreStmt()
	 *       | HLoadStmt()
	 *       | MoveStmt()
	 *       | PrintStmt()
	 */
	public R visit(Stmt n, A argu) {
		R _ret=null;
		n.f0.accept(this, (A)"stmt");
		return _ret;
	}

	/**
	 * f0 -> "NOOP"
	 */
	public R visit(NoOpStmt n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		System.out.println("NOOP");
		return _ret;
	}

	/**
	 * f0 -> "ERROR"
	 */
	public R visit(ErrorStmt n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		System.out.println("ERROR");
		return _ret;
	}

	/**
	 * f0 -> "CJUMP"
	 * f1 -> Temp()
	 * f2 -> Label()
	 */
	public R visit(CJumpStmt n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		String str1 = n.f1.accept(this, argu).toString();
		String str2 = n.f2.accept(this, argu).toString();
		
		String isReg;
		Integer isLoc;
		
		isReg = Regs.get(name).get(str1);
		isLoc = Locations.get(name).get(str1);
		if(isReg!=null)
			str1 = isReg;
		
		else if(isLoc!=null)
		{
			System.out.println("ALOAD v1 SPILLEDARG "+isLoc);
			str1 = "v1";
		}
		else{
			str1 = sepReg;
		}
		
		System.out.println("CJUMP "+str1+" "+str2);
		return _ret;
	}

	/**
	 * f0 -> "JUMP"
	 * f1 -> Label()
	 */
	public R visit(JumpStmt n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		String l = n.f1.accept(this, argu).toString();
		System.out.println("JUMP "+l);
		return _ret;
	}

	/**
	 * f0 -> "HSTORE"
	 * f1 -> Temp()
	 * f2 -> IntegerLiteral()
	 * f3 -> Temp()
	 */
	public R visit(HStoreStmt n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		String str1 = n.f1.accept(this, argu).toString();
		String str2 = n.f2.accept(this, argu).toString();
		String str3 = n.f3.accept(this, argu).toString();


		String isReg;
		Integer isLoc;
		
		// for f1
		isReg = Regs.get(name).get(str1);
		isLoc = Locations.get(name).get(str1);
		if(isReg!=null){
			str1 = isReg;
		}
		else if(isLoc!=null)
		{
			System.out.println("ALOAD v1 SPILLEDARG "+isLoc);
			str1 = "v1";
		}
		else{
			str3 = sepReg;
		}
		
		// for f2
		isReg = Regs.get(name).get(str3);
		isLoc = Locations.get(name).get(str3);
		if(isReg!=null)
			str3 = isReg;
		else if(isLoc!=null)
		{
			System.out.println("ALOAD v0 SPILLEDARG "+isLoc);
			str3 = "v0";
		}
		
		else{
			str3 = sepReg;
		}
		
		System.out.println("HSTORE "+" "+str1+" "+str2+" "+str3);
		return _ret;
	}

	/**
	 * f0 -> "HLOAD"
	 * f1 -> Temp()
	 * f2 -> Temp()
	 * f3 -> IntegerLiteral()
	 */
	public R visit(HLoadStmt n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		String str1 = n.f1.accept(this, argu).toString();
		String str2 = n.f2.accept(this, argu).toString();
		String str3 = n.f3.accept(this, argu).toString();

		String isReg;
		Integer isLoc;

		// for f2
		isReg = Regs.get(name).get(str2);
		isLoc = Locations.get(name).get(str2);
		if(isReg!=null)
			str2 = isReg;
		else if(isLoc!=null)
		{
			System.out.println("ALOAD v0 SPILLEDARG "+isLoc);
			str2 = "v0";
		}
		else{
			str3 = sepReg;
		}
		
		// for f1
		isReg = Regs.get(name).get(str1);
		isLoc = Locations.get(name).get(str1);
		if(isReg!=null){
			str1 = isReg;
			System.out.println("HLOAD "+str1+" "+str2+" "+str3);
		}
		else if(isLoc!=null)
		{
			System.out.println("ALOAD v1 SPILLEDARG "+isLoc);
			System.out.println("HLOAD v1 "+str2+" "+str3);
			System.out.println("ASTORE SPILLEDARG "+isLoc+" v1");
		}
		else{
			str1 = sepReg;
			System.out.println("HLOAD "+str1+" "+str2+" "+str3);
		}
		return _ret;
	}

	/**
	 * f0 -> "MOVE"
	 * f1 -> Temp()
	 * f2 -> Exp()
	 */
	public R visit(MoveStmt n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		String str1 = n.f1.accept(this, argu).toString();
		String str3 = n.f2.accept(this, argu).toString();
		
		String isReg;
		Integer isLoc;

		// for f2
		if(str3.contains("TEMP")){
			isReg = Regs.get(name).get(str3);
			isLoc = Locations.get(name).get(str3);
			if(isReg!=null)
				str3 = isReg;
			else if(isLoc!=null)
			{
				System.out.println("ALOAD v0 SPILLEDARG "+isLoc);
				str3 = "v0";
			}
			else{
				str3 = sepReg;
			}
		}
		
		//for f1
		isReg = Regs.get(name).get(str1);
		isLoc = Locations.get(name).get(str1);
		if(isReg!=null){
			str1 = isReg;
			System.out.println("MOVE "+str1+" "+str3);
		}
		else if(isLoc!=null)
		{
			System.out.println("MOVE "+sepReg+" "+str3);
			System.out.println("ASTORE SPILLEDARG "+isLoc+" "+sepReg);
		}
		else{
			str1 = sepReg;
			System.out.println("MOVE "+str1+" "+str3);
		}
		
		return _ret;
	}

	/**
	 * f0 -> "PRINT"
	 * f1 -> SimpleExp()
	 */
	public R visit(PrintStmt n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		String str3 = n.f1.accept(this, argu).toString();
		
		String isReg;
		Integer isLoc;
		
		if(str3.contains("TEMP")){
			isReg = Regs.get(name).get(str3);
			isLoc = Locations.get(name).get(str3);
			if(isReg!=null)
				str3 = isReg;
			else if(isLoc!=null)
			{
				System.out.println("ALOAD v0 SPILLEDARG "+isLoc);
				str3 = "v0";
			}
			else{
				str3 = sepReg;
			}
		}
		
		System.out.println("PRINT "+str3);
		return _ret;
	}

	/**
	 * f0 -> Call()
	 *       | HAllocate()
	 *       | BinOp()
	 *       | SimpleExp()
	 */
	public R visit(Exp n, A argu) {
		R _ret=null;
		_ret = n.f0.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "BEGIN"
	 * f1 -> StmtList()
	 * f2 -> "RETURN"
	 * f3 -> SimpleExp()
	 * f4 -> "END"
	 */
	public R visit(StmtExp n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		String str3 = n.f3.accept(this, argu).toString();
		
		String isReg;
		Integer isLoc;
		
		if(str3.contains("TEMP")){
			isReg = Regs.get(name).get(str3);
			isLoc = Locations.get(name).get(str3);
			if(isReg!=null)
				str3 = isReg;
			else if(isLoc!=null)
			{
				System.out.println("ALOAD v1 SPILLEDARG "+isLoc);
				str3 = "v1";
			}
			else{
				str3 = sepReg;
			}
		}
		
		System.out.println("MOVE v0 "+str3);
		
		int temp = numArgs.get(name);			//extra args
		int base = temp<4?0:temp-4;				
		base+=Locations.get(name).size();	//spilled
		
		for(int i=0;i<8;i++){
			System.out.println("ALOAD s"+i+" SPILLEDARG "+(base+i));
		}
		
		n.f4.accept(this, argu);
		System.out.println("END");
		return _ret;
	}

	/**
	 * f0 -> "CALL"
	 * f1 -> SimpleExp()
	 * f2 -> "("
	 * f3 -> ( Temp() )*
	 * f4 -> ")"
	 */
	public R visit(Call n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		
		String str3 = n.f1.accept(this, argu).toString();
		
		String isReg;
		Integer isLoc;
		
		if(str3.contains("TEMP")){
			isReg = Regs.get(name).get(str3);
			isLoc = Locations.get(name).get(str3);
			if(isReg!=null)
				str3 = isReg;
			else if(isLoc!=null)
			{
				System.out.println("ALOAD v0 SPILLEDARG "+isLoc);
				str3 = "v0";
			}
			else{
				str3 = sepReg;
			}
		}
		
		int temp = numArgs.get(name);			//extra args
		int base = temp<4?0:temp-4;				
		base+=Locations.get(name).size();	//spilled
		base+=8;							//s0 to s7
		
		for(int i=0;i<9;i++){
			System.out.println("ASTORE SPILLEDARG "+(base+i)+" t"+i);
		}
		
		n.f2.accept(this, argu);
		countArgs = 0;
		n.f3.accept(this, (A)"args");
		
		n.f4.accept(this, argu);
		System.out.println("CALL "+str3);
		
		for(int i=0;i<9;i++){
			System.out.println("ALOAD t"+i+" SPILLEDARG "+(base+i));
		}
		return (R)"v0";
	}

	/**
	 * f0 -> "HALLOCATE"
	 * f1 -> SimpleExp()
	 */
	public R visit(HAllocate n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		String str3 = n.f1.accept(this, argu).toString();
		
		String isReg;
		Integer isLoc;
		
		if(str3.contains("TEMP")){
			isReg = Regs.get(name).get(str3);
			isLoc = Locations.get(name).get(str3);
			if(isReg!=null)
				str3 = isReg;
			else if(isLoc!=null)
			{
				System.out.println("ALOAD v0 SPILLEDARG "+isLoc);
				str3 = "v0";
			}
			else{
				str3 = sepReg;
			}
		}
		
		_ret = (R)("HALLOCATE "+str3);
		return _ret;
	}

	/**
	 * f0 -> Operator()
	 * f1 -> Temp()
	 * f2 -> SimpleExp()
	 */
	public R visit(BinOp n, A argu) {
		R _ret=null;
		String str1 = n.f0.accept(this, argu).toString();
		String str2 = n.f1.accept(this, argu).toString();
		String str3 = n.f2.accept(this, argu).toString();
		
		// for f1
		String isReg = Regs.get(name).get(str2);
		Integer isLoc = Locations.get(name).get(str2);
		
		if(isReg!=null)
			str2 = isReg;
		else if(isLoc!=null)
		{
			System.out.println("ALOAD v0 SPILLEDARG "+isLoc);
			str2 = "v0";
		}
		else{
			str3 = sepReg;
		}
		
		//for f2
		if(str3.contains("TEMP")){
			isReg = Regs.get(name).get(str3);
			isLoc = Locations.get(name).get(str3);
			if(isReg!=null)
				str3 = isReg;
			else if(isLoc!=null)
			{
				System.out.println("ALOAD v1 SPILLEDARG "+isLoc);
				str3 = "v1";
			}
			else{
				str3 = sepReg;
			}
		}
		
		if(str1.equals("LE")){
			System.out.println("MOVE "+sepReg+" MINUS "+str2+" 1");
			_ret = (R)("LT "+sepReg+" "+str3);
		}
		else if(str1.equals("NE")){
			System.out.println("MOVE "+sepReg+" LT "+str2+" "+str3);
			System.out.println("CJUMP "+sepReg+" L"+labelCount);
			System.out.println("MOVE "+sepReg+" 1");
			System.out.println("JUMP L"+(labelCount+2));
			System.out.println("L"+labelCount);
			System.out.println("NOOP");
			System.out.println("MOVE "+sepReg+" LT "+str3+" "+str2);
			System.out.println("CJUMP "+sepReg+" L"+(labelCount+1));
			System.out.println("MOVE "+sepReg+" 1");
			System.out.println("JUMP L"+(labelCount+2));
			System.out.println("L"+(labelCount+1));
			System.out.println("NOOP");
			System.out.println("MOVE "+sepReg+" 0");
			System.out.println("L"+(labelCount+2));
			labelCount+=2;
			_ret = (R)sepReg;
		}
		
		else
			_ret = (R)(str1+" "+str2+" "+str3);
		return _ret;
	}
	
	/**
	 * f0 -> "LE"
	 *       | "NE"
	 *       | "PLUS"
	 *       | "MINUS"
	 *       | "TIMES"
	 *       | "DIV"
	 */
	public R visit(Operator n, A argu) {
		R _ret=null;
		if(n.f0.which==0)
			_ret = (R)"LE";
		if(n.f0.which==1)
			_ret = (R)"NE";
		if(n.f0.which==2)
			_ret = (R)"PLUS";
		if(n.f0.which==3)
			_ret = (R)"MINUS";
		if(n.f0.which==4)
			_ret = (R)"TIMES";
		if(n.f0.which==5)
			_ret = (R)"DIV";
		n.f0.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> Temp()
	 *       | IntegerLiteral()
	 *       | Label()
	 */
	public R visit(SimpleExp n, A argu) {
		R _ret=null;
		String str = n.f0.accept(this, argu).toString();
		_ret = (R)str;
		return _ret;
	}

	/**
	 * f0 -> "TEMP"
	 * f1 -> IntegerLiteral()
	 */
	public R visit(Temp n, A argu) {
		R _ret=null;
		
		n.f0.accept(this, argu);
		String a = n.f1.accept(this, argu).toString();
		String str = "TEMP "+a;
		
		if(argu!=null && argu.toString().equals("args")){
			if(Regs.get(name).containsKey(str))
				str =  Regs.get(name).get(str);
			else if(Locations.get(name).containsKey(str)){
				System.out.println("ALOAD v1 SPILLEDARG "+Locations.get(name).get(str));
				str = "v1";
			}
			else{
				str = sepReg;
			}
			
			if(countArgs<4){
				System.out.println("MOVE a"+countArgs+" "+str);
			}
			else
			{
				System.out.println("PASSARG "+(countArgs-4+1)+" "+str);
			}
			countArgs++;
		}
			
		_ret = (R)(str);
		return _ret;
	}

	/**
	 * f0 -> <INTEGER_LITERAL>
	 */
	public R visit(IntegerLiteral n, A argu) {
		R _ret=null;
		_ret = (R)n.f0.tokenImage;
		n.f0.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> <IDENTIFIER>
	 */
	public R visit(Label n, A argu) {
		R _ret=null;
		_ret = (R)n.f0.tokenImage;
		if(argu!=null && argu.toString().equals("print"))
			System.out.println(_ret.toString());
		n.f0.accept(this, argu);
		return _ret;
	}

}