//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class FirstParse<R,A> implements GJVisitor<R,A> {
	//
	// Auto class visitors--probably don't need to be overridden.
	//
	public static ArrayList<Set<String>> use = new ArrayList<Set<String>>();
	public static ArrayList<String> def = new ArrayList<String>();
	public static HashMap<String, Integer> labelToIndex = new HashMap<String,Integer>();
	int i=0;
	public static int numNodes;
	public static HashMap<String, Integer> start = new HashMap<String,Integer>();
	public static HashMap<String, Integer> end = new HashMap<String,Integer>();
	String name;
	
	public static HashMap<String,Integer> numArgs = new HashMap<String,Integer>();
	public static HashMap<String,Integer> maxArgs = new HashMap<String,Integer>();
	
	ArrayList<Integer> countArgs;
	int count;
	
	public R visit(NodeList n, A argu) {
		R _ret=null;
		int _count=0;
		for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
			e.nextElement().accept(this,argu);
			_count++;
		}
		return _ret;
	}

	public R visit(NodeListOptional n, A argu) {
		if ( n.present() ) {
			R _ret=null;
			int _count=0;
			for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
				e.nextElement().accept(this,argu);
				_count++;
			}
			return _ret;
		}
		else
			return null;
	}

	public R visit(NodeOptional n, A argu) {
		if ( n.present() )
			return n.node.accept(this,argu);
		else
			return null;
	}

	public R visit(NodeSequence n, A argu) {
		R _ret=null;
		int _count=0;
		for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
			e.nextElement().accept(this,argu);
			_count++;
		}
		return _ret;
	}

	public R visit(NodeToken n, A argu) { return null; }


	//
	// User-generated visitor methods below
	//

	/**
	 * f0 -> "MAIN"
	 * f1 -> StmtList()
	 * f2 -> "END"
	 * f3 -> ( Procedure() )*
	 * f4 -> <EOF>
	 */
	public R visit(Goal n, A argu) {
		R _ret=null;
		name = "MAIN";
		start.put(name, i);
		countArgs = new ArrayList<Integer>();
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		numArgs.put("MAIN", 0);
		if(countArgs.size()!=0)
			maxArgs.put(name, Collections.max(countArgs));
		else
			maxArgs.put(name,0);
		end.put(name, i);
		Set<String> useSet = new HashSet<String>();
		use.add(useSet);
		def.add("null");
		i++;
		n.f3.accept(this, argu);
		n.f4.accept(this, argu);
		numNodes = i-1;
		return _ret;
	}

	/**
	 * f0 -> ( ( Label() )? Stmt() )*
	 */
	public R visit(StmtList n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> Label()
	 * f1 -> "["
	 * f2 -> IntegerLiteral()
	 * f3 -> "]"
	 * f4 -> StmtExp()
	 */
	public R visit(Procedure n, A argu) {
		R _ret=null;
		name = n.f0.accept(this, argu).toString();
		start.put(name,i);
		n.f1.accept(this, argu);
		String numstr = n.f2.accept(this, argu).toString();
		Integer num = Integer.valueOf(numstr);
		numArgs.put(name, num);
		countArgs = new ArrayList<Integer>();
		n.f3.accept(this, argu);
		n.f4.accept(this, argu);
		if(countArgs.size()!=0)
			maxArgs.put(name, Collections.max(countArgs));
		else
			maxArgs.put(name,0);
		return _ret;
	}

	/**
	 * f0 -> NoOpStmt()
	 *       | ErrorStmt()
	 *       | CJumpStmt()
	 *       | JumpStmt()
	 *       | HStoreStmt()
	 *       | HLoadStmt()
	 *       | MoveStmt()
	 *       | PrintStmt()
	 */
	public R visit(Stmt n, A argu) {
		R _ret=null;
		Set<String> useSet = new HashSet<String>();
		use.add(useSet);
		n.f0.accept(this, argu);
		i++;
		return _ret;
	}

	/**
	 * f0 -> "NOOP"
	 */
	public R visit(NoOpStmt n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		def.add("null");
		return _ret;
	}

	/**
	 * f0 -> "ERROR"
	 */
	public R visit(ErrorStmt n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		def.add("null");
		return _ret;
	}

	/**
	 * f0 -> "CJUMP"
	 * f1 -> Temp()
	 * f2 -> Label()
	 */
	public R visit(CJumpStmt n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		use.get(i).add(n.f1.accept(this, argu).toString());
		def.add("null");
		String label = n.f2.accept(this, (A)"id").toString();
		return _ret;
	}

	/**
	 * f0 -> "JUMP"
	 * f1 -> Label()
	 */
	public R visit(JumpStmt n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		String label = n.f1.accept(this, (A)"id").toString();
		def.add("null");
		return _ret;
	}

	/**
	 * f0 -> "HSTORE"
	 * f1 -> Temp()
	 * f2 -> IntegerLiteral()
	 * f3 -> Temp()
	 */
	public R visit(HStoreStmt n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		use.get(i).add(n.f1.accept(this, argu).toString());
		n.f2.accept(this, argu);
		use.get(i).add(n.f3.accept(this, argu).toString());
		def.add("null");
		return _ret;
	}

	/**
	 * f0 -> "HLOAD"
	 * f1 -> Temp()
	 * f2 -> Temp()
	 * f3 -> IntegerLiteral()
	 */
	public R visit(HLoadStmt n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		def.add(n.f1.accept(this, argu).toString());
		use.get(i).add(n.f2.accept(this, argu).toString());
		n.f3.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "MOVE"
	 * f1 -> Temp()
	 * f2 -> Exp()
	 */
	public R visit(MoveStmt n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		def.add(n.f1.accept(this, argu).toString());
		n.f2.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "PRINT"
	 * f1 -> SimpleExp()
	 */
	public R visit(PrintStmt n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		def.add("null");
		return _ret;
	}

	/**
	 * f0 -> Call()
	 *       | HAllocate()
	 *       | BinOp()
	 *       | SimpleExp()
	 */
	public R visit(Exp n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "BEGIN"
	 * f1 -> StmtList()
	 * f2 -> "RETURN"
	 * f3 -> SimpleExp()
	 * f4 -> "END"
	 */
	public R visit(StmtExp n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		n.f3.accept(this, (A)"proc");
		end.put(name, i);
		i++;
		n.f4.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "CALL"
	 * f1 -> SimpleExp()
	 * f2 -> "("
	 * f3 -> ( Temp() )*
	 * f4 -> ")"
	 */
	public R visit(Call n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		count = 0;
		n.f3.accept(this, (A)"args");
		countArgs.add(count);
		n.f4.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "HALLOCATE"
	 * f1 -> SimpleExp()
	 */
	public R visit(HAllocate n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> Operator()
	 * f1 -> Temp()
	 * f2 -> SimpleExp()
	 */
	public R visit(BinOp n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		String str1 = n.f1.accept(this, argu).toString();
		use.get(i).add(str1);
		n.f2.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "LE"
	 *       | "NE"
	 *       | "PLUS"
	 *       | "MINUS"
	 *       | "TIMES"
	 *       | "DIV"
	 */
	public R visit(Operator n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> Temp()
	 *       | IntegerLiteral()
	 *       | Label()
	 */
	public R visit(SimpleExp n, A argu) {
		R _ret=null;
		if(argu!=null && argu.toString().equals("proc")){
			Set<String> useSet = new HashSet<String>();
			use.add(useSet);
			def.add("null");
		}
		
		_ret = n.f0.accept(this, (A)"id");
		
		if(n.f0.which==0){
			use.get(i).add(_ret.toString());
		}
		
		return _ret;
	}

	/**
	 * f0 -> "TEMP"
	 * f1 -> IntegerLiteral()
	 */
	public R visit(Temp n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		String num = n.f1.accept(this, argu).toString();
		String temp = ("TEMP "+num);
		if(argu!=null && argu.toString().equals("args")){
			count++;
			use.get(i).add(temp);
		}
		_ret = (R)temp;
		return _ret;
	}

	/**
	 * f0 -> <INTEGER_LITERAL>
	 */
	public R visit(IntegerLiteral n, A argu) {
		R _ret=null;
		_ret = (R)n.f0.tokenImage;
		n.f0.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> <IDENTIFIER>
	 */
	public R visit(Label n, A argu) {
		R _ret=null;
		n.f0.accept(this, argu);
		String label = n.f0.tokenImage;
		_ret = (R)label;
		if(argu==null){
			Set<String> useSet = new HashSet<String>();
			use.add(useSet);
			def.add("null");
			labelToIndex.put(label, i);
			i++;
		}
		return _ret;
	}
}